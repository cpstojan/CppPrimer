Chapter 2 Notes

Introduction to Chapter 2:
-C++ defines several primitive types (characters, integers, floating-point numbers, etc.)
-more importantly C++ allows for the definition of our own data types
-the standard library allows defines more complicated types that can be very powerful

2.1 Primitive Built-in Types:
arithmetic types - built-in types representing boolean values, character, integers, and floating-point numbers
-the void type has no associated values
-artihmetic types are divided into two categories 
	1) integral types - character and booolean
	2) floating-point types
-minimum size (actual size depends on machine)
	bool - boolean - NA
	char - character - 8 bits
	wchar_t - wide character - 16 bits
	char16_t - unicode character - 32 bits
	char32_t - unicode character - 32 bits
	short - short integer - 16 bits
	int - integer - 16 bits
	long - long integer - 32 bits
	long long - long integer 64 bits
	
-a float is a single-precision floating-point containing 6 siginificant digits
-a double is a double-precision floating-point containing 10 siginificant digits
-a long double is an extended-precision floating-point containing 10 significant digits
-most compilers provide more precision than the speciied minimum of significant digits
-a char is guaranteed to be big enough to hold numeric values corresponding to the characters in the machine's basic character set
	-always the same size as a single machine byte
-a wchar_t is guranteed to be large enough to hold any character in the machine's largest extended character set
-Unicode is a standard for representing characters used in essentially any natural language
-the type long long was introduced by the new standard
-the smallest chunk of addressable memory is referred to as a byte
-a word is a small number of bytes
-on most machines a byte contains 8 bits and a word is either 32 or 64 bits
-typically floats are represented in one word, doubles in two words, and long doubles in three or four words
-other than bool and the extended character types, the integral types may be signed or unsigned
signed - integer type that holds negative or positive values, including zero
unsigned - integer type that holds only values greater than or equal to zero
-int, short, long and long long are all signed (must explicitally define it unsigned)
-unsigned int may be abbreviated as unsigned
-there are three distinct basic character types char, signed char, and unsigned char
-although there are three types of char there are only two representations signed and unsigned
-plain char types uses one of the representations (dependent on the compiler)
-C++, like C, is designed to let programs get close to the hardware
-rules of thumb when selecting what type to use
	-use an unsigned type when you know that the values cannot be negative
	-use int over short, if the value is larger than guaranteed size of int use long long
	-avoid using char for artihmetic expressions as it may be signed or unsigned depending on machine
	-if you need a tiny integer, explicitly specify either signed char or unsigned char
	-use double for floating-point computations over float as it's more precise and size difference is negligible
	-precision offered by long double usually is unnecessary

-many types support the ability to convert objects of the given type to other, related types
-C++ often does automatic type conversion when given an object of one type when another was expected
-when we assign a non-bool arithmetic type to a bool object the resule is false if the value is 0 and true otherwise
-when we assign a bool to an arithmetic type the resule value is 1 if true the bool is true otherwise 0
-when we assign a floating-point value to an object of integral type, the value is truncated
-when we assign an integral value to a floating-point type the fractional part is 0
-when we assign an out-of-range value to an unsigned type the result is the remainder of the value modulo the number of values the taret type can hold
	-8-bit unsigned can hold values from 0 to 255 inclusive, modulo 256, -1 produces 255
-when we assign an out-of-range value to an object of signed type, the result is undefined
-undefined may crash or may produce a garbage value
-undefined errors may still compile but leave the code open to risk of crashing at any time
-implenetation defined behavior should also be avoided as it will make the program non-portable
-if using an int value and an unsigned the int value ordinarily is converted to unsigned for example
	unsigned u =10;
	int i = -42;
	std::cout << u + i << std::endl // prints 4294967264
-when using unsigned in for loops you must be careful as they will never be negative (wrap around) while loops may be easier
-it is best not to mix signed and unsigned values as they can produce surprising results
-when mixing signed and unsigned values the result is always converted to an unsigned

literl - a value such as a number, character, or string of characters. The value cannot change.
-every literal has a type
-integer literals that begin with 0 are interpreted as octal
-integer literals that begin with 0x or 0X are interpreted as hexadecimal
	20 /* decimal */ 024 /* octal */ 0x14 /* hexadecimal */
-the type of an integer literal depend on its value and notation
-by default decimal literals are signed, octal and hexadecimal can be either
-there are no literals of type short
-we can override the defaults by using a suffix
	
	Chracter and Character String Literals:
	Prefix		Meaning					Type
	u			Unicode 16 character	char16_t
	U			Unicode 32 character	char32_t
	L			wide character			wchar_t
	
	Integer Literals
	Suffix		Minimum Type
	u or U		unsigned
	l or L		long
	ll or LL	long long
	
	Floating-Point Literals
	Suffix		Type
	f or F		float
	l or L		long double
-although integer literals may be stored in signed types, the value of a decimal literal is never a negative nnumber
-the minus sign is not part of the literal, it is an operator that negates the value of its (literal) operand
-by default dloating-point literals have type double
-floating point literals can also include an exponent
-a string literal is an array of constant chars, it is one longer than expected due to the null character added to every string literal
-string literals that are separated by only spaces, tabs, or newlines are concatenated into a single literal
	Escape Sequences to print special characters
	\n	newline
	\v	vertical tab
	\\	backslash
	\r	carriage return
	\t	horizontal tab
	\b	backspace
	\?	question mark
	\f	formfeed
	\a	alert (bell)
	\"	double quote
	\'	single quote
-the escape sequence could also be \x followed by hexadecimal digits or \ followed by octal digits
-for octal digits proceeding an escape sequence only the first three are evaluated
-for hexadecimal digits proceeding an escape sequence all are evaluated
-when you write a long literal, use the uppercase L as the lowercase letter l looks like the digit 1
-true and false are literals of type bool
-nullptr is a pointer literal

2.2 Variables:
variable - a named object or reference to manipulate.  In C++, variables must be declared before they are used.
-each variable has a type
-a variable definition consists of a type specifier, a list of one or more variable names separated by commas, and a semicolon
-an object that is initialized gets the specified value at the moment it is created
-initialization and assignment are different operations in C++
-initialization is giving a variable a value when it is created, assignment obliterates an objects current value and replaces it
-there are many ways to initialize in C++ for example all are valid
	int units_solid = 0;
	int units_sold = {0};
	int units_sold{0};
	int units_sold(0);
list initialization - form of initialization that uses curly braces to enclose one or more initializers
-the compiler will not let us list initialize variables of built-in type if the initializer might lead to the loss of information
	long double ld = 3.1415926536;
	int {1d}. b = {1d} // error: narrowing conversion required
	int c(1d), d= 1d; // ok: but value will be truncated
default initialized - how objects are initialized when no explicit initializer is given
					- class type objects are initialized dependent on the classes implementation
					- objects of built-in type defined at global scope are initialized to 0
					- objects of built-in type defined at local scope are unitialized

-an unitialized variable has an indeterminate value
-it is recommended to intialize all objects of built-in type for safety reasons
separate compilation - ability to split a program into mulltiple separate source files
declaration - asserts the existence of a variable, function, or type defined elsewhere
definition - allocates storage for a variable of a specified type
-to obtain a declaration that is not also a definition we add the extern keyword
	extern int i; // declares but does not define i
	int i; // ddeclares and defines i
-if an intializer is added to the extern the intializer overrides the extern
	extern double pi = 3.1416; // definition
-variables must be defined exactly once but can be declared many times
-extern should be present in the header file not the source file
-a function should never need to declare a variable using extern it should be global
	file1.h
	extern int errno;
	
	file1.c
	int errno = 0;
	
	file2.c
	#include <file1.h>
	
	if (errno < 10) 
		... code ...  // errno may be used as it was declared somewhere else and included

-C++ is a statically typed language, types are checked at compile time
type checking - the process by which the compiler verifies that the way objects of a given type are used is consistent with the definition of that type
identifiers - sequence of character that make up a name, they are case sensitive
-an identifier may not contain two consecutive underscores, nor can it begin with an underscore followed by an uppercase letter
-identifiers defined outside a function may not begin with an underscore
-variables are usually lowercase, classes are usually uppercase

scope - the portion of a program in which names have meaning. C++ has severl levels of scope
	global - names defined oustide any other scope
	class - names defined inside a class
	namespace - names defined inside a namespace
	block - names defined inside a block
-scopes nest, once a name is declared it is accessible until the end of the scope in which it was declared
-most scopes are delimited by curly braces
-main is defined outside a function, thus, has global scope
-define variables where you first use them to improve readability
inner scope - scope that is nested inside another scope
outer scope - scope that encloses another scope
-once declared the variable can be used by scopes nested inside the current scope
-names declared in the outer scope can also be redefined in an inner scope, although this is often a bad idea
-to request a global scope variable (override the local) you may use the scope operator with no namespace ::numGlobal (global has no namespace)

2.3 Compound Types:
compound type - a type that is defined in terms of another type
-there are several compound types in C++ (references and pointers are examples)
-a simple declaration consist of a type followed by a list of variable names
base type - type specifier, possibly qualified by const, that precedes the declarators in a declaration
declarator - the part of a declaration that includes the name being defined and an optional type modifier
-so far in declarations declarators are just variable names, and the base type is the type of variable
-more complicated declarators specify variables with compound types that are built from the base type of the declaration (const * etc)

-the new standard introduced a new kind of reference called an rvalue reference
-when we use the term reference we mean lvalue reference
reference - an alias for another object
-a reference type is defined by writing a declarator of the form &d where d is the name being declared
	int ival = 1024
	int &refVal = ival;
-usually when a variable is defined the value of the initializer is copied into the created object
-for references it is binded (the reference) to the initializer
-references may not be left uninitialized and can not be rebinded
-a reference is not an object a reference is just another name for an already existing object
-anything done to the reference is done to the initializer
	int &refVal3 = refVal; // refVal3 is bound to the object to which refVal is bound
-because references are not objects we may not define a reference to a reference 
-a reference may be bound only to an object, not to a literal or to the result of a more general expression
-the type of reference and the object to which the reference refers must match exactly (two exceptions covered later)

-a pointer is a compound type that "points to" another type, used for indirect access to other objects (like references)
-pointers are an object and can be assigned and copied
	int * ip1 = &ival, *ip2; // uninitialized pointers at block scope have an undefined value
-a pointer holds the address of another object, the address can be accessed using the address-of operator &
-as references are not objects the don't have addresses and may not be pointed to
-the pointer type and the object being pointed to must match as the pointer type is used to infer the type of object and operations performed
-the value stored in a pointer can be in one of four states
	1. It can point to an object
	2. It can point to the location just immediately past the end of an object
	3. It can be a null pointer
	4. It can be invalid (anything other than the above three)
-the result of accesing an invalid pointer is undefined
-to use a value that the pointer points to you must use the derefence operator (the * operator)
	cout << *ip1;
	*ip1 = 0; // int pointed to by ip1 is now equal to 0
-in declarations & and * are used to form compound types, in expressions these samy symbols are used to deonate an operator

null pointers - pointer whose value is 0. A null pointer is valid but does not point to any object
-a null pointer can be obtained several ways
	int * p1 = nullptr;
	int * p2 = 0;
	int * p3 = NULL;
preprocessor variable - the preprocessor replaces each preprocessor variable by ts vale before program is compiled
-older programs used a preprocessor variable named NULL which the cstdlib header defined as zero
-in the new standard nullptr comes as a built-in literal
-the preprocessor is a program that runs before the compiler
-it is illegal to assign an int variable to a pointer even if the variable's value is zero
-it is suggested to initialize all pointers to avoid risks if not to another object than to nullptr
-you can use a pointer in a condition if(p1) if p1 is nullptr it is evaluated as false
-pointers can also be compared with the equality operators if they are of the same type
-a pointer to an object and a pointer one past the end of a different object can hold the same address
-a void pointer is a special pointer type that can hold the address of any object
-void pointers are more restricted in what operations can be performed on them
-a void pointer can be compared, it can be passed or returned to a function, and it can be assigned to another void pointer
-you can not use a void pointer to operate on the object it addresses as the type is unknown and thus operations are unknown
-generally we use a void pointer to deal with memory as memory rather than using the pointer to access the objet stored in that memory

-a variable defintion consists of a base type and a list of declarators, each declarator can relate its variable to the base type differently
	int i = 1024, * p = &i, &r = i;
-for a definition int * p, int is the base type, * modifies the type of p
	int* p1, p2; // p1 is a pointer to an int, p2 is simply an int

-there is no limit to how many type modifiers can be applied to a declarator
-pointers can point to other pointers and so on
	int ival = 1024;
	int * pi = &ival;
	int ** ppi = &pi;
	std::cout << **ppi << *pi << ival << std::endl;

-you can not point to a reference as a reference is not an object and has no address
-you can have a reference to a pointer as a pointer is an object
	int i = 42;
	int *p; // p is an uninitialized int pointer
	int *&r = p; // r is a reference to the pointer p
	r = &i; // r refers to p, p now points to i
	*r = 0; // i is set to 0, as r points to i
-definitions are most easily read from right to left

2.4 Const Qualifier
-we can make a variable unchangeable by defining the variable's type as const
	const in bugSize = 512;
-any attempt to assign a new value to a const will be an error
-a const may not be left uninitialized this is an error
-a const can do everything a regular variable can (be used to convert to bool, arithmetic expressions) so long as it does not change the const
-when a const object is initialized from a compile-time constant the compiler will usually replace uses of the variable with its corresponding value
-const variables declared at global scope are local to the file in which the object is defined
-to use const like other nonconst variables and utilize it across multiple files without multiple definitions a different process is used
-extern must be used on both its definition and declaration(s)
	file_1.h
	extern const int bufSize;
	
	file_1.cc
	extern const int bufSize = fcn();

-as with any other object, you may bind a reference to an object of a const type
	const int ci = 1024;
	const int &r1 = ci;
-if the object is a const type the reference must also be a const type

-there are two exceptions to the rule that the type of a reference must match the type of the object to which it refers
-we can bind a reference to const to a nonconst object, a literal or a more general expression
	int i = 42;
	const int &r1 = i; // valid
	const int &r2 = 42; // valid
	const int &r3 = r1 * 2; // valid
	int &r4 = r1 * 2 // not valid as r4 is non const reference
temporary - unnamed object created by the compiler while evaluating an expression
-when creating a const reference that requires a conversion the compiler creates a temporary object
-it can be thought of as this:
	double dval = 3.14;
	const int &ri = dval;
	// const int temp = dval; //done by compiler hidden away
	// const int &ri = temp; //
	
-a pointer to a const may not be used to change the object to which the pointer points
-you may store the address of a const object only in a pointer to const (much like with references)
	const double pi = 3.14; 
	double *ptr = &pi // error as ptr is plain pointer
	const double *cptr = &pi; // valid
-again much like references you may use a pointer to const to point to a nonconst object (one of the two exceptions of type matching for pointers)
	double dval = 3.14;
	cont int * cptr2 = &dval; // valid
-like reference to const a pointer to const says nothing about whether the underlying object is const

-as pointers are objects as with any other object type, we can have a pointer that is itself const
-const pointers must be initialized
	int errNumb = 0;
	int * const curErr = &errNumb;