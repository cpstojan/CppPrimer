Chapter 1 Notes

Introduction to the Book:
-the primary goal of the new standards of C++ (C++11) is to increase uniformity, make the standard library easier, safer and more efficient, and to make it easier to write efficient abstractions
-new features include auto, smart ptrs, and move-enabled containers

1.1 Writing a Simple C++ Program:
function - named unit of computation
main - function called by the operating system to execute a C++ program, each program must have one and only one function named main
-a function definition has four elements: return type, function name, parameter list and function body
-the value returned by main is a status indicator, usually a value of 0 indicates success, non zero has meaning defined by the system (type of error)
-a type defines both the contents of a data element and the operations that are possible on that data
-the data our programs manipulate is stored in variables (every variable has a type)
source file - term used to describe a file that contains a C++ program
-to obtain the status on Unix systems use the command echo $? 
-on Unix executables have no suffix (on Windows suffix is .exe)
-options can be added to the GNU compiler an example is -Wall which generates warnings about problematic constructs
-to create an executable on GNU g++ -c prog1 prog1.cc
-then to run the created executable (assuming permissions) ./prog1

1.2 A First Look at Input/Output:
-in the standard library input/output is commonly done in the iostream, specifically istream and ostream
-a stream is a sequence of characters read from or written from an IO device
-the library defines four IO objects
	1) to handle input we use an object of type istream named cin
	2) for output an object of type ostream named cout is used
	3) for standard error type ostream; cerr
	4) for general information type ostream; clog
-every program that uses a library facility must include its associated header
-an expression yields a result and is composed of one or more operands and (usually) an operator
-the output operator is << it takes two operands; the left-hand operand must be an ostream object, the right-hand operand is a value to print
-because the operator returns its left-hand operand, we can chain together output requests
string literal - sequence of zero or more characters enclosed in double quotes
manipulator - object, such as std::endl that when read or written "manipulates" the stream itself
-reading cin flushes the cout buffer, endl also flushes the buffer
-flushing the buffers ensures that all the ouput the program has generated so far is actually written to the output stream, rather than sitting in memory
-when writing print statements to debug always flush the stream, otherwise if the program crashes output may be left in the buffer hiding the true crash site
-writing std::cout uses the scope operator to say that we want to use the name cout that is defined in the namespace std
initialize - give an object a value at the same time that it is created (defined)
-the input operator is >> it behaves analogously to the output operator (istream on its left, object on its right) returning its left-hand operand to continue the chain while storing the value in the object

1.3 A Word About Comments:
-comments come in two forms single line and multiline, multiline comments /* */ do not nest
-these types of comments are inherited from C
-for multiline comments it is sometimes advantageous to start each line with an asteriks to easily show the line is commented out

1.4 Flow of Control:
-a while statement executes 'while' something is true
-a condition is an expression that yields a result that is either true or false
-the operator += adds the right-hand operand to the left-hand operand and stores the result in the left-hand operand
-there are similar operators such as /=, *= and -= among others
-a while executes by testing the condition then executing the associated statement until the condition is false
-a block is a sequence of zero or more statements enclosed by curly brackets

-each for statement has two parts a header and a body, the header controls how often the body is executed
-the header has three parts: an initialization statement, a condition, and an expression
-the initialization statement is the only part of the header that runs only once, the other two parts run on every iteration
-for loops are advantageous when there is a definite amount of iterations, while should be used if indefinite

-when we use an istream as a condition while (cin >> value), the effect is to test the state of the stream
-the condition produces false at EOF or at an invalid input
-an end of file can be inputed on Unix using ctrl + d

syntax errors - the programmer has made a grammatical error in C++
type errors - each item of data in C++ has an associated type, if types mismatch this may throw an error
declaration errors - every name used in a C++ program must be declared, failure to declare a name may throw an error

-like most languages C++ provides an if statement that supports conditional execution
-C++ programs are largely free format meaning spacing and new lines usually make no difference
-there is no right way to format but there is value in consistency

1.5 Introducing Classes:
data structure - a logical grouping of data and operations
-in C++ we define our own data structures by defining a class
class - facility for defining our own data structures together with associated operations
-a primary focus of C++ is to make it possible to define class types that behave as naturally as built in types
-to use a class we need to know three things:
	1) what is its name?
	2) where is it defined?
	3) what operations does it support?
-conventionally header file names are derived from the name of a class defined in that header
	a class named Sales_item will be defined in Sales_item.h
-depending on the compiler this may not be necessary but is suggested for good style
-headers from the standard library are enclosed in angle brackets, all others are enclosed in double quotes
-to use a class we don't need to know how it is implemented, what we need to know is what operations objects of that type can perform
-type name is the same as the class name

-using file redirection in Bash can make testing programs less tedious
	c1 < infile.txt > outfile.txt

-a member function is a function that is defined as part of a class, sometimes referred to as methods, it is ordinarily called to operate on a specific object
-the . operator applies only to objects of class type, the left-hand operand must be an object of class type, the right-hand operand must name a member of that type
-we call a function using the call operator (), arguments go in the parenthese if any

1.6 The Bookstore Program:
buffer - a region of storage used to hold data.  IO facilities often store input in a buffer and read or write the buffer independently from actions in the program
header - mechanism whereby the definitions of a class or other names are made available to multiple programs. A program uses a header through a #include directive
library type - type, such as istream, defined by the standard library
namespace - mechanism for putting names defined by a library into a single place.  Namespaces help avoid inadvertent name clashes.
-variables of class type for which no initial value is specified are initialized as specified by the class definition
-variables of built-in type defined inside a function are uninitialized unless explicitly initialized. It is an error to try to use the value of an uninitialized variable
-the names defined by the C++ library are in the namespace std
-cerr is not buffered, clog is buffered
-library types such as istream and ostream are classes
-for a conditonal statement 0 is false any other value is true (opposite of $?)
-expressions are evaluated to produce a result, it is the smallest unit of computation (i + j)

-the main goals of this chapter was to allow you to compile and execute a simple C++ program
-also how to define a main, define variables, do input and output, and how to use flow control (if, while, for)
-this chapter showed how to use a class defined by someone else, later chapters will show how to define a class

Part I: The Basics:
-every language has a set of features, understanding these features is key to learning the language
-the most fundamental features are 
	-built-in types such as integers, characters, etc.
	-variables
	-expressions and statements to manipulate values
	-control structures (flow control)
	-defining functions
-the type of an object determines what operations can be performed on it
-some languages (Python) check types at run time, C++ is statically types meaning type checking is done at compile time
-statically typed languages must have the compiler knowing the type of every name used in the program
-C++ power comes from it's ability to allow the programmer to define new data structures
-programmer defined types are sometimes called class types (as opposed to built-in types)